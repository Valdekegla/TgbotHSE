"""–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters.command import Command
import sqlite3
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from bs4 import BeautifulSoup
import requests
from random import randint
import time
from test import converter, exlogging

"""–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã—à–∫–∏–Ω—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞"""

# https://www.hse.ru/news/announcements/?domain114721158=on
# https://www.hse.ru/news/announcements/
# https://www.hse.ru/news/announcements/?research_target_220096694=on

url = 'https://www.hse.ru/news/announcements/?research_target_220096694=on'
req = requests.get(url)
source = req.text


def currentevents():
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä—Å–∏—Ç —Å–∞–π—Ç—ã –≤—à—ç.
    :returns: —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    :rtype: Dict
    """

    allevlist = []
    soup = BeautifulSoup(source, 'lxml')
    allevents = soup.findAll('div', class_='b-events')
    for event in allevents:
        allevlist.append({
            'date': event.find('span', class_='g-day smaller').text +
                    event.find('span', class_='g-day smaller').nextSibling,
            'time': event.find('div', class_='b-events__extra date').text,
            'description': event
            .find('div', class_='b-events__body_title large')
            .find('p').text,
            'href': event.find('div', class_='b-events__body_title large')
            .find('a').get('href')
        })
    return allevlist


"""–†–∞–±–æ—Ç–∞ —Å –∞–ø–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

b1 = KeyboardButton(text='–í—Å–ø–æ–º–Ω–∏—Ç—å –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èü•π')
b2 = KeyboardButton(text='–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µü§ì')
kb1 = ReplyKeyboardMarkup(keyboard=[[b1, b2]])
in1 = InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å', callback_data='delete')
im = sqlite3.connect('studdata.db')
inline = InlineKeyboardMarkup(inline_keyboard=[[in1]])
delinline = InlineKeyboardMarkup(inline_keyboard=[[]])

"""–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""


class MyFilter:
    def __init__(self, text):
        self.text = text

    def __call__(self, message):
        return message.text == self.text


class CallFilter:
    def __init__(self, data):
        self.data = data

    def __call__(self, callback):
        return callback.data == self.data


class SpecCallFilter(CallFilter):

    def __call__(self, callback):
        for i in self.data.split():
            if i == callback.data:
                return True
        else:
            return False


class DelCallFilter(CallFilter):

    def __call__(self, callback):
        return self.data in callback.data


""""""

logging.basicConfig(level=logging.INFO)

bot = Bot(token="6824893217:AAHUfEX9FevgtXe0M1dyPbxrDvbBGAcwtV0")

dp: Dispatcher = Dispatcher()

with sqlite3.connect('studdata.db') as con:
    dbcon = con.cursor()

    @dp.message(Command('start'))
    async def cmd_start(message):

        """
        –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É start.
        :param message: –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :type message: aiogram.types.message.Message
        :returns: –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç, –∑–∞–Ω–æ—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        :rtype: message.answer
        """

        try:
            with sqlite3.connect('studdata.db') as conn:
                conn.cursor().execute('insert into students values (?, ?)',
                                      (message.chat.id, message.chat.first_name))
                await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {}!üôÜüèø'.format(message.chat.first_name), reply_markup=kb1)
        except sqlite3.IntegrityError:
            if message.chat.id == 478571763:
                await message.answer(
                    '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {}!ü¶ù'.format(message.chat.first_name),
                    reply_markup=kb1)
                await bot.send_sticker(chat_id=478571763,
                                       sticker='CAACAgIAAxkBAAJm1mV3a6Z4w4vzMEIfP'
                                               'Oom7Y6LoW82AALdJAACMpVpSRJtw9Kr48TPMwQ')
            else:
                await message.answer(
                    '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {}!ü´¶'.format(message.chat.first_name),
                    reply_markup=kb1)
        finally:
            await message.delete()
            await exlogging(message)


    @dp.message(MyFilter('–í—Å–ø–æ–º–Ω–∏—Ç—å –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èü•π'))
    async def rem(message):

        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥—è—â–∞—è –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :type message: aiogram.types.message.Message
        :returns: –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ–±–æ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∑–∞–ø–∏—Å–∞–ª—Å—è
        :rtype: message.answer
        """

        await exlogging(message)

        allev = ''
        dbcon.execute('delete from events where sectime < {mydate}'.format(mydate=int(time.time())))
        dbcon.execute('select * from events where login={}'.format(message.chat.id))
        result = dbcon.fetchall()
        for x in range(len(result)):
            allev += ('{}) {}\n\n{}\n\n\n'.format(x + 1, result[x][2], result[x][1]))

        if len(allev.replace('\n', '')) == 0:
            await message.answer(
                '<i>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</i>',
                parse_mode='html',
            )
        else:
            await message.answer(
                allev + '\n–í–æ—Ç —Ç–∞–∫–∏–µ <i><b>–ø–∏—Ä–æ–≥–∏</b></i>',
                parse_mode='html',
                reply_markup=inline
            )


    @dp.message(MyFilter('–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µü§ì'))
    async def new_event(message):

        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥—è—â–∞—è —Ç–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–æ–∏—è –í–®–≠.
        :param message: –ö–æ–º–∞–Ω–¥–∞ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µü§ì
        :type message: aiogram.types.message.Message
        :returns: –ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏–∏—è—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        :rtype: message.answer
        """

        evs = currentevents()[0:8]
        btns = []
        evsmessage = ''
        for one in range(len(evs)):
            evsmessage += '{0})\t{1} –≤ {2}\n\n–ü—Ä–æ–π–¥–µ—Ç: <i>{3}</i>\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ <a href="{4}">–∑–¥–µ—Å—å</a>.\n\n\n'.format(
                str(one + 1),
                evs[one]['date'],
                evs[one]['time'],
                evs[one]['description'],
                evs[one]['href']
            )
            btns.append(InlineKeyboardButton(
                text=str(one + 1),
                callback_data=str(one),
            ))
        btns = [btns, [InlineKeyboardButton(text='–ù–µ —Ö–æ—á—Éü•∂', callback_data='lol')]]
        inl = InlineKeyboardMarkup(inline_keyboard=btns)
        evsmessage += '\n<b>–ù–∞ –∫–∞–∫–æ–µ –º–µ—Ä–æ–ø–∏—è—Ç–∏–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?</b>'

        await message.answer(
            evsmessage,
            parse_mode='html',
            reply_markup=inl,
        )


    @dp.callback_query(CallFilter('delete'))
    async def dell(callback):  # !

        """
        –§—É–Ω–µ—Ü–∏—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é—â–∞—è –∫–æ–ª–ª–±–µ–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
        :param callback:
        :type callback: aiogram.types.callback.CallBackQuery
        :returns: –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
         –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        :rtype: callback
        """

        dbcon.execute('select * from events where login={}'.format(callback.message.chat.id))
        con.commit()
        allmy = dbcon.fetchall()
        return await bot.edit_message_reply_markup(
            message_id=callback.message.message_id,
            chat_id=callback.message.chat.id,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=str(x + 1), callback_data='/d ' + str(x)) for x in range(len(allmy))]]
            )
        )


    @dp.callback_query(DelCallFilter('/d'))
    async def final(callback):

        """
        –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è—é—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç—Ç–∏–µ.
        :param callback: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–ª–±–µ–∫ –∑–∞–ø—Ä–æ—Å
        :type callback: aiogram.types.callback.CallBackQuery
        :returns: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ—à–ª–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        :rtype: callback
        """

        dbcon.execute('select * from events where login={}'.format(callback.message.chat.id))
        con.commit()
        allmy = dbcon.fetchall()
        print('Passed', allmy)
        dbcon.execute("delete from events where login={} and event='{}'".format(callback.message.chat.id,
                                                                                allmy[int(callback.data.split()[-1])][1]
                                                                                ))
        con.commit()
        await callback.message.delete()
        await bot.send_message(text='–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æü§Ø', chat_id=callback.message.chat.id)


    @dp.callback_query(CallFilter('lol'))
    async def loll(callback):

        """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å —Å –∏–Ω–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param callback: –ó–∞–ø—Ä–æ—Å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏–∏ –≤—ã–±–æ—Ä–∞
        :type callback: aiogram.types.callback.CallBackQuery
        :returns: –£–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ä–æ–ø—Ä–∏—Ç–∏–π
        :rtype: callback
        """

        await callback.message.delete()
        await bot.send_sticker(chat_id=callback.message.chat.id,
                               sticker='CAACAgIAAxkBAAJmTWV1vikou8-G2PBSViaOZFwwRq5sAAIaFgACw97xSxLetM2_dAOqMwQ')


    @dp.callback_query(SpecCallFilter('0 1 2 3 4 5 6 7 8 9 10'))
    async def clhandler(callback):

        """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å —Å –∏–Ω–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param callback: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        :type callback: aiogram.types.callback.CallBackQuery
        :returns: –ü–µ—Ä–µ–¥–∞–µ—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        :rtype: callback
        """

        evc = currentevents()
        try:
            dbcon.execute('insert into events values (?, ?, ?, ?)',
                          (
                              callback.message.chat.id,
                              evc[int(callback.data)]['description'],
                              evc[int(callback.data)]['date'] + ' –≤ ' + evc[int(callback.data)]['time'],
                              converter(evc[int(callback.data)]['date'].replace(',', '').split() + [
                                  evc[int(callback.data)]['time']])
                          )
                          )
            con.commit()
            await callback.message.delete()
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text='–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è'
            )
            await bot.send_sticker(chat_id=callback.message.chat.id,
                                   sticker='CAACAgIAAxkBAAJmyGV3LbZbnPqpuBPu2uFP51DagTJmAAKsFQACZj4ISetkezw6-wqpMwQ')
        except sqlite3.IntegrityError:
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text='–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –±—ã–ª–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µüòß'
            )


    @dp.message()
    async def trashcan(message):

        """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param message: –ó–∞–ø—Ä–æ—Å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏–∏ –≤—ã–±–æ—Ä–∞
        :type message: aiogram.types.message.Message
        :returns: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ç–∏–∫–µ—Ä
        :rtype: message
        """

        await exlogging(message)

        await message.answer(['–î–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —è —Ç–µ–±—è', '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª', '–ó–∞—á–µ–º —Ç—ã —Ç–∞–∫ —Å–æ –º–Ω–æ–π', 'a?',
                              '–°–µ–º—å —Ä–∞–∑ –ø–æ–¥—É–º–∞–π, –æ–¥–∏–Ω —Ä–∞–∑ —ç—ç –∑–∞–±—ã–ª', '–ï—â–µ —á–µ', 'No u'][randint(0, 6)])
        await bot.send_sticker(chat_id=message.chat.id,
                               sticker=['CAACAgIAAxkBAAJmXGV17yyRixtJz5FI2f7btSZG4RbQAAJIPQACNJFQSxboe-0TTDGOMwQ',
                                        'CAACAgIAAxkBAAJmamV18vaDxXDq4xqykdURc_p8QfG0AAIaFQAC5EWJSAWIR3DOabUSMwQ',
                                        'CAACAgIAAxkBAAJmbGV180FkSBVY_jzReVTTMbh58bqpAALjIQACMukISc-ratM09ccWMwQ',
                                        'CAACAgIAAxkBAAJmbmV187hfxhWzal8GYSX3Iegh6XlHAAJ9FgACEO0IST90KOVDRRhcMwQ',
                                        'CAACAgIAAxkBAAJmcGV189dZ-Lcbvd1gOTffFpjH9rbnAALeFAACdDRoSBmj4nFVnthIMwQ',
                                        'CAACAgIAAxkBAAJmcmV18-adepSXp2eLPK7MIxx_wMozAAJZFwAC1InpSAifFwVetekTMwQ',
                                        'CAACAgIAAxkBAAJmdGV19A_kBm7ZiRtk2z5UCVNHrywpAALcFAACIjD5SyKhra_cxSi8MwQ',
                                        'CAACAgIAAxkBAAJmdmV19DsX1hbY7GKlthh2B7s5pZRXAAJKFAACHksRSIHyig858ZtFMwQ',
                                        'CAACAgIAAxkBAAJmtmV22wFn_NKgnLGZvWRtekKBq4X9AAJdQQACZYdRSwUGjwXc8rQ6MwQ'][
                                   randint(0, 8)])


    asyncio.run(dp.start_polling(bot))
